{"version":3,"sources":["components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","text","setText","useState","_jsxs","_Fragment","children","className","style","color","mode","_jsx","heading","value","onChange","event","target","backgroundColor","id","rows","disabled","length","onClick","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","handleCopy","navigator","clipboard","writeText","handleExtraSpaces","split","join","filter","element","Alert","height","alert","concat","type","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","Navbar","title","toggleMode","document","body","Date","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fcf576c7.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value) \n    }\n\n    // Credits: A\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text); \n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    // Credits: Coding Wala\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    const [text, setText] = useState(''); \n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"TextUtils\"\n        mode={mode}\n        toggleMode={toggleMode}\n        key={new Date()}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n        {/* /users --> Component 1\n        /users/home --> Component 2 */}\n        {/* <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Try TextUtils - word counter, character counter, remove extra spaces\"\n          mode={mode}\n        />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}